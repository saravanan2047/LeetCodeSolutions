class Solution 
{
    public boolean isValidSudoku(char[][] board) 
    {
        Set<Character> row=new HashSet<Character>();
        Set<Character> col= new HashSet<Character>();
        for(int i=0;i< board.length;i++)
        {
            for(int j=0;j<board[i].length;j++)
            { 
                        if(row.contains(board[i][j]) || col.contains(board[j][i])) return false;
                        else 
                         {
                            if(board[i][j]!='.') row.add(board[i][j]);
                            if(board[j][i]!='.') col.add(board[j][i]);
                        }
            }
            row.clear();
            col.clear();
        }
        
        for(int i=0;i<board.length;i+=3)
        {
            for(int j=0;j<board[i].length;j+=3)
            {
                if(!checker(i,j,board))
                     return false;
            }
        }
        return true;
    }
    public boolean checker(int row, int col, char[][]board)
    {
        Set<Character> r= new HashSet<Character>();
        for(int i=row;i<row+3;i++)
        {
            for(int j=col;j<col+3;j++)
            {
                if(r.contains(board[i][j])) 
                    return false;
                else  
                   if(board[i][j]!='.') r.add(board[i][j]);       
            }
        }
        r.clear();
        return true;
    }

}

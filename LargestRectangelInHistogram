class Solution {
    public int largestRectangleArea(int[] heights) 
    {
        int [] res=new int[heights.length];
        int [] left= new int[heights.length];
        int [] right= new int[heights.length];
        int max=0;
        Stack<Integer> stack= new Stack<>();
        for(int i=0;i<heights.length;i++)
        {
            if(stack.isEmpty())
            {
                left[i]=0;
                stack.push(i);
            }
            else
            {
                while(!stack.isEmpty() && heights[stack.peek()]>=heights[i])
                    stack.pop();
                left[i]=stack.isEmpty()?0:stack.peek()+1;
                stack.push(i);
            }
        }
        stack.clear();
        for(int i=heights.length-1;i>=0;i--)
        {
            if(stack.isEmpty())
            {
                right[i]=heights.length-1;
                stack.push(i);
            }
            else
            {
                while(!stack.isEmpty() && heights[stack.peek()]>=heights[i])
                    stack.pop();
                right[i]=stack.isEmpty()?heights.length-1:stack.peek()-1;
                stack.push(i);
            }

        }
        for(int i=0;i<heights.length;i++)
        {
            max=Math.max(max,(right[i]-left[i]+1)*heights[i]);
        }
        return max;
        
    }
}
